{"version":3,"sources":["Header.js","util.js","GridCmp.js","DayCmp.js","App.js","index.js"],"names":["Header","AppBar","position","Toolbar","Typography","variant","getDay","Date","buildRow","source","start","ar","limit","length","cmb","slice","days","partOfDay","planets","mapping","DataCmp","day","horraiArr","isToday","hour","getHours","pod","convertedHour","rowNumber","map","pd","k","Fragment","key","className","horrai","isActive","text","order","HeadCol","style","HourCol","props","TableHeader","findTime","row","Array","from","_","max","timing","GridCmp","content","firstRow","secondRow","indexOf","today","DayCmp","currentDay","dt","currentDate","App","CssBaseline","Container","maxWidth","marginTop","padding","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c056137.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\r\n\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n\r\n                    <Typography variant=\"h6\" >\r\n                        MyAstro\r\n                    </Typography>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;","const buildRow = (source, start = 0, ar = []) => {\r\n    let limit = 12;\r\n    if (ar.length < limit) {\r\n        let cmb = source.slice(start, limit - ar.length);\r\n        ar = [...ar, ...cmb];\r\n        return buildRow(source, 0, ar);\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport const getHour = () => new Date().getHours();\r\nexport const getDay = () => new Date().getDay();\r\nexport default buildRow;\r\n// let ar = [0, 1, 2, 3, 4, 5, 6];\r\n\r\n// console.log(buildRow(ar, 6))","\r\nimport React from \"react\";\r\nimport buildRow, { getHour, getDay } from './util';\r\nimport './grid.css';\r\n\r\nconst days = [\"ஞா\", \"தி\", \"செ\", \"பு\", \"வி\", \"வெ\", \"ச\"];\r\nconst partOfDay = ['பகல்', 'இரவு'];\r\nconst planets = [\r\n    \"சூரி\",\r\n    \"சுக்\",\r\n    \"புத\",\r\n    \"சந்\",\r\n    \"சனி\",\r\n    \"குரு\",\r\n    \"செ\"\r\n]\r\nconst mapping = [0, 3, 6, 2, 5, 1, 4];\r\nconst typeOfPlanet = [];\r\n/*\r\n    mapping[day] = map[0]\r\n    \r\n*/\r\nconst DataCmp = ({ day, horraiArr, isToday }) => {\r\n    let hour = getHour();\r\n    let d = getDay();\r\n    let pod = hour > 12 ? 1 : 0; // to get the part of day from time\r\n    let convertedHour = hour > 12 ? hour % 12 : hour;\r\n    let rowNumber = convertedHour < 6 ? convertedHour + 6 : convertedHour - 6;\r\n\r\n    const content = partOfDay.map((pd, k) => {\r\n        return (\r\n            <React.Fragment key={`p${k}`}>\r\n                <div className=\"flex-container\">\r\n                    <HeadCol day={day} pd={pd} />\r\n                    {horraiArr[k].map((horrai, key) => {\r\n                        let isActive = (isToday && rowNumber === key && pod === k) ? true : false;\r\n                        return <HourCol text={horrai} order={key + 2} key={`H${key}`} className={isActive ? 'active-horai' : ''} />\r\n                    })}\r\n\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    })\r\n    return content;\r\n}\r\n\r\nconst HeadCol = ({ day, pd }) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex-item\" style={{ order: 1 }} >{day}</div>\r\n            <div className=\"flex-item\" style={{ order: 2 }} >{pd}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst HourCol = (props) => {\r\n    let { order, text } = props;\r\n    return (\r\n        <>\r\n            <div className={`flex-item ${props.className}`} style={{ order: order }}>{text}</div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst TableHeader = () => {\r\n    let startAt = 6;\r\n    let max = 12;\r\n    let findTime = (key) => (key + startAt) % max;\r\n    let timings = Array.from({ length: 12 }, (_, key) => findTime(key) === 0 ? `${max}-${max + 1}` : `${findTime(key)}-${findTime(key) + 1}`)\r\n    let row = timings.map((timing, key) => {\r\n        return <HourCol text={timing} order={key + 2} key={`T${key}`} />\r\n    })\r\n    return (\r\n        <>\r\n            <div className=\"flex-container\">\r\n                <HourCol className='long-text' text=\"கிழமை\" order={0} />\r\n                <HourCol className='short-text' text=\"கி\" order={0} />\r\n                <HourCol className='long-text' text=\"காலம்\" order={1} />\r\n                <HourCol className='short-text' text=\"கா\" order={1} />\r\n                {row}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nfunction GridCmp() {\r\n    const content = days.map((day, key) => {\r\n        let firstRow = buildRow(planets, mapping[key]);\r\n        let secondRow = buildRow(planets, planets.indexOf(firstRow[firstRow.length - 1]) + 1);\r\n        let today = getDay();\r\n        return (\r\n            <React.Fragment key={`D${key}`}>\r\n                <DataCmp day={day} horraiArr={[firstRow, secondRow]} today={today} isToday={today === key} />\r\n            </React.Fragment>\r\n        )\r\n    });\r\n    return (\r\n        <>\r\n            <TableHeader />\r\n            {content}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default GridCmp;","import React from 'react';\r\nconst DayCmp = (props) => {\r\n    let dayOfWeek = [\"Sunday\", \"Monday\", \"Tuesay\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    let curDate = props.dt;\r\n    let currentDay = dayOfWeek[curDate.getDay()];\r\n    return (\r\n        <>\r\n            <p>Today is: {currentDay}</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DayCmp;","import React from 'react';\n\nimport { CssBaseline, Typography, Container } from '@material-ui/core'\nimport Header from './Header';\nimport GridCmp from './GridCmp';\nimport DayCmp from './DayCmp';\nimport './App.css'\n\nlet currentDate = new Date();\n\nconst App = () => {\n  return (\n    <>\n      <CssBaseline />\n      <Header />\n      <Container maxWidth=\"md\" className=\"container\">\n        <div style={{ marginTop: 20, padding: 30 }}>\n          <Typography variant=\"h6\" component=\"h6\">\n            Timings\n          </Typography>\n          <GridCmp />\n          <DayCmp dt={currentDate} />\n        </div>\n      </Container>\n    </>\n  )\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}